# -*- coding: utf-8 -*-
"""proyek-1-machine-learning-terapan-dicoding.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WYKtBP9mtxVCxA5jOEgljFzFmeqB4qdp

### Proyek 1 Machine Learning Terapan
### Mobile Price Prediction
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

import matplotlib.pyplot as plt
import seaborn as sns

"""### Load Data"""

df = pd.read_csv("/kaggle/input/mobile-price-classification/train.csv")
df.head(10)

"""# Data Understanding"""

df.info()

"""- battery_power = Total energy a battery can store in one time measured in mAh
- blue = Has bluetooth or not
- clock_speed = speed at which microprocessor executes instructions
- dual_sim = Has dual sim support or not
- fc = Front Camera mega pixels
- four_g = Has 4G or not
- int_memory = Internal Memory in Gigabytes
- m_dep = Mobile Depth in cm
- mobile_wt = Weight of mobile phone
- n_cores = Number of cores of processor
- pc = Primary Camera mega pixels
- px_hieght = Pixel Resolution Height
- px_width = Pixel Resolution Width
- ram = Random Access Memory in Megabytes
- sc_h = Screen Height of mobile in cm
- sc_w = Screen Width of mobile in cm
- talk_time = longest time that a single battery charge will last when you are
- three_g = Has 3G or not
- touch_screen = Has touch screen or not
- wifi = Has wifi or not
- price_range = This is the target variable with value of 0(low cost), 1(medium cost), 2(high cost) and 3(very high cost).
"""

df.describe()

"""### Handling Missing Value"""

df.isnull().sum()

"""### Handling Duplicate Value"""

df.duplicated().sum()

"""### Univariate Analysis"""

# Styling Seaborn
sns.set(style='whitegrid', palette='pastel')

# Membuat Boxplot dengan Custom Style
plt.figure(figsize=(10, 6))
boxplot = sns.boxplot(
    x=df['battery_power'],
    color='#4C72B0',
    saturation=0.75,
    linewidth=2.5
)

# Memberi Title dan Label yang Lebih Informatif
plt.title("Battery Power Distribution", fontsize=16, fontweight='bold', color='#333333')
plt.xlabel("Battery Power (mAh)", fontsize=14, color='#333333')
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Menampilkan Boxplot
plt.show()

# Styling Seaborn
sns.set(style='whitegrid', palette='pastel')

# Membuat Boxplot dengan Custom Style
plt.figure(figsize=(10, 6))
boxplot = sns.boxplot(
    x=df['clock_speed'],
    color='#4C72B0',
    saturation=0.75,
    linewidth=2.5
)

# Memberi Title dan Label yang Lebih Informatif
plt.title("Clock Speed Distribution", fontsize=16, fontweight='bold', color='#333333')
plt.xlabel("Clock Speed", fontsize=14, color='#333333')
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Menampilkan Boxplot
plt.show()

# Styling Seaborn
sns.set(style='whitegrid', palette='pastel')

# Membuat Boxplot dengan Custom Style
plt.figure(figsize=(10, 6))
boxplot = sns.boxplot(
    x=df['fc'],
    color='#4C72B0',
    saturation=0.75,
    linewidth=2.5
)

# Memberi Title dan Label yang Lebih Informatif
plt.title("Front Camera Distribution", fontsize=16, fontweight='bold', color='#333333')
plt.xlabel("Front Camera", fontsize=14, color='#333333')
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Menampilkan Boxplot
plt.show()

# Styling Seaborn
sns.set(style='whitegrid', palette='pastel')

# Membuat Boxplot dengan Custom Style
plt.figure(figsize=(10, 6))
boxplot = sns.boxplot(
    x=df['int_memory'],
    color='#4C72B0',
    saturation=0.75,
    linewidth=2.5
)

# Memberi Title dan Label yang Lebih Informatif
plt.title("Internal Memory Distribution", fontsize=16, fontweight='bold', color='#333333')
plt.xlabel("Internal Memory", fontsize=14, color='#333333')
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Menampilkan Boxplot
plt.show()

# Styling Seaborn
sns.set(style='whitegrid', palette='pastel')

# Membuat Boxplot dengan Custom Style
plt.figure(figsize=(10, 6))
boxplot = sns.boxplot(
    x=df['m_dep'],
    color='#4C72B0',
    saturation=0.75,
    linewidth=2.5
)

# Memberi Title dan Label yang Lebih Informatif
plt.title("Mobile Depth Distribution", fontsize=16, fontweight='bold', color='#333333')
plt.xlabel("Mobile Depth", fontsize=14, color='#333333')
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Menampilkan Boxplot
plt.show()

# Styling Seaborn
sns.set(style='whitegrid', palette='pastel')

# Membuat Boxplot dengan Custom Style
plt.figure(figsize=(10, 6))
boxplot = sns.boxplot(
    x=df['mobile_wt'],
    color='#4C72B0',
    saturation=0.75,
    linewidth=2.5
)

# Memberi Title dan Label yang Lebih Informatif
plt.title("Mobile Weight Distribution", fontsize=16, fontweight='bold', color='#333333')
plt.xlabel("Mobile Weight", fontsize=14, color='#333333')
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Menampilkan Boxplot
plt.show()

# Styling Seaborn
sns.set(style='whitegrid', palette='pastel')

# Membuat Boxplot dengan Custom Style
plt.figure(figsize=(10, 6))
boxplot = sns.boxplot(
    x=df['n_cores'],
    color='#4C72B0',
    saturation=0.75,
    linewidth=2.5
)

# Memberi Title dan Label yang Lebih Informatif
plt.title("Number of Core Processors Distribution", fontsize=16, fontweight='bold', color='#333333')
plt.xlabel("Number of Core Processors", fontsize=14, color='#333333')
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Menampilkan Boxplot
plt.show()

# Styling Seaborn
sns.set(style='whitegrid', palette='pastel')

# Membuat Boxplot dengan Custom Style
plt.figure(figsize=(10, 6))
boxplot = sns.boxplot(
    x=df['pc'],
    color='#4C72B0',
    saturation=0.75,
    linewidth=2.5
)

# Memberi Title dan Label yang Lebih Informatif
plt.title("Primary Camera Pixels Distribution", fontsize=16, fontweight='bold', color='#333333')
plt.xlabel("Primary Camera Pixels", fontsize=14, color='#333333')
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Menampilkan Boxplot
plt.show()

# Styling Seaborn
sns.set(style='whitegrid', palette='pastel')

# Membuat Boxplot dengan Custom Style
plt.figure(figsize=(10, 6))
boxplot = sns.boxplot(
    x=df['px_height'],
    color='#4C72B0',
    saturation=0.75,
    linewidth=2.5
)

# Memberi Title dan Label yang Lebih Informatif
plt.title("Mobile Height Distribution", fontsize=16, fontweight='bold', color='#333333')
plt.xlabel("Mobile Height in Pixel", fontsize=14, color='#333333')
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Menampilkan Boxplot
plt.show()

# Styling Seaborn
sns.set(style='whitegrid', palette='pastel')

# Membuat Boxplot dengan Custom Style
plt.figure(figsize=(10, 6))
boxplot = sns.boxplot(
    x=df['px_width'],
    color='#4C72B0',
    saturation=0.75,
    linewidth=2.5
)

# Memberi Title dan Label yang Lebih Informatif
plt.title("Pixel Resolution in Width Distribution", fontsize=16, fontweight='bold', color='#333333')
plt.xlabel("Pixel Resolution in Width", fontsize=14, color='#333333')
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Menampilkan Boxplot
plt.show()

# Styling Seaborn
sns.set(style='whitegrid', palette='pastel')

# Membuat Boxplot dengan Custom Style
plt.figure(figsize=(10, 6))
boxplot = sns.boxplot(
    x=df['ram'],
    color='#4C72B0',
    saturation=0.75,
    linewidth=2.5
)

# Memberi Title dan Label yang Lebih Informatif
plt.title("Random Access Memory (RAM) Distribution", fontsize=16, fontweight='bold', color='#333333')
plt.xlabel("Random Access Memory (RAM)", fontsize=14, color='#333333')
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Menampilkan Boxplot
plt.show()

# Styling Seaborn
sns.set(style='whitegrid', palette='pastel')

# Membuat Boxplot dengan Custom Style
plt.figure(figsize=(10, 6))
boxplot = sns.boxplot(
    x=df['sc_w'],
    color='#4C72B0',
    saturation=0.75,
    linewidth=2.5
)

# Memberi Title dan Label yang Lebih Informatif
plt.title("Screen Width Distribution", fontsize=16, fontweight='bold', color='#333333')
plt.xlabel("Screen Width", fontsize=14, color='#333333')
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Menampilkan Boxplot
plt.show()

# Styling Seaborn
sns.set(style='whitegrid', palette='pastel')

# Membuat Boxplot dengan Custom Style
plt.figure(figsize=(10, 6))
boxplot = sns.boxplot(
    x=df['sc_h'],
    color='#4C72B0',
    saturation=0.75,
    linewidth=2.5
)

# Memberi Title dan Label yang Lebih Informatif
plt.title("Screen Height Distribution", fontsize=16, fontweight='bold', color='#333333')
plt.xlabel("Screen Height", fontsize=14, color='#333333')
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Menampilkan Boxplot
plt.show()

# Styling Seaborn
sns.set(style='whitegrid', palette='pastel')

# Membuat Boxplot dengan Custom Style
plt.figure(figsize=(10, 6))
boxplot = sns.boxplot(
    x=df['talk_time'],
    color='#4C72B0',
    saturation=0.75,
    linewidth=2.5
)

# Memberi Title dan Label yang Lebih Informatif
plt.title("Battery Charge Time Estimation Distribution", fontsize=16, fontweight='bold', color='#333333')
plt.xlabel("Battery Charge Time Estimation", fontsize=14, color='#333333')
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Menampilkan Boxplot
plt.show()

"""Dapat dilihat pada setiap variabel(yang valuenya bukan 0 atau 1), cenderung memiliki distribusi normal. Walaupun ada beberapa variabel yang memiliki outlier, tetapi jumlah outliernya tidak banyak. Kemungkinan, data ini merupakah Mobile Phone yang memang memiliki fitur yang cukup unik dibanding dengan data mobile phone yang lain

### Univariate Analysis

**Categorical Features**
"""

# List Kategori yang Ingin Divisualisasikan
cat_features = ['blue', 'dual_sim', 'four_g', 'three_g', 'touch_screen', 'wifi']

# Styling Seaborn
sns.set(style='whitegrid', palette='pastel')

# Ukuran Figure dan Layout Subplot
plt.figure(figsize=(20, 16))
plt.subplots_adjust(hspace=0.3, wspace=0.3)

# Membuat Subplot untuk Setiap Kategori
for i, col in enumerate(cat_features):
    plt.subplot(2, 3, i + 1)
    count_data = df[col].value_counts().sort_index()

    # Bar Plot dengan Warna yang Konsisten
    bars = plt.bar(count_data.index, count_data.values, color='#4C72B0', alpha=0.85)

    # Tambahkan Angka di Atas Setiap Bar
    for bar in bars:
        yval = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2, yval + 2, int(yval),
                 ha='center', va='bottom', fontsize=12, color='black')

    # Memberi Title dan Label yang Lebih Informatif
    plt.title(f'{col.replace("_", " ").title()} Distribution', fontsize=16, fontweight='bold', color='#333333')
    plt.xlabel(col.replace("_", " ").title(), fontsize=14)
    plt.ylabel('Count', fontsize=14)
    plt.xticks([0, 1], labels=['No', 'Yes'])  # Label untuk 0 dan 1

    # Grid Horizontal untuk Membantu Membaca Nilai
    plt.grid(axis='y', linestyle='--', alpha=0.7)

# Menampilkan Visualisasi
plt.show()

df.hist(bins=50, figsize=(20,15))
plt.show()

"""### Multivariate Analysis"""

# Styling Seaborn
sns.set(style='whitegrid')

# Ukuran Figure
plt.figure(figsize=(20, 16))

# Membuat Correlation Matrix
correlation_matrix = df.corr().round(2)

# Membuat Heatmap dengan Gaya yang Lebih Menarik
heatmap = sns.heatmap(
    data=correlation_matrix,
    annot=True,
    fmt=".2f",                       # Format angka desimal 2 digit
    cmap='coolwarm',                  # Warna gradasi yang elegan
    cbar_kws={'shrink': 0.75},        # Ukuran color bar yang lebih kecil
    linewidths=0.5,                   # Garis pembatas antar kotak
    linecolor='white',                # Warna garis pembatas
    annot_kws={'fontsize': 12, 'fontweight': 'bold', 'color': 'black'}
)

# Memberi Title dan Label yang Lebih Informatif
plt.title("Correlation Matrix", fontsize=24, fontweight='bold', color='#333333', pad=20)
plt.xticks(fontsize=14, rotation=45, fontstyle='italic')
plt.yticks(fontsize=14, rotation=0, fontstyle='italic')

# Menampilkan Heatmap
plt.show()

"""Dapat dilihat dalam correlation matrix,

- beberapa variabel tidak memiliki korelasi (0 korelasi), contohnya m_dep,n_cores
- beberapa variabel yang korelasinya sangat rendah, contohnya clock_speed,four_g
- beberapa variabel yang cukup rendah korelasinya, contohnya blue, dual_sim, fc, int_memory, mobile_wt, pc, sc_h, sc_w, talk_time, three_g, touch_screen, wifi
- beberapa variabel yang tinggi korelasinya, contohnya battery_power, px_height, px_width, ram

Untuk variabel yang tidak memiliki korelasi dan sangat rendah korelasinya, saya tidak akan pakai

# Data Preparation
"""

df = df.drop(columns=['m_dep','n_cores','clock_speed','four_g'])
df.head(10)

X = df.drop(columns=['price_range'])
Y = df['price_range']

X.head()

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(X_scaled,Y, test_size=0.1, random_state = 42)

x_train[0]

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(x_train)}')
print(f'Total # of sample in test dataset: {len(x_test)}')

print(f'Total # of sample in whole dataset: {len(Y)}')
print(f'Total # of sample in train dataset: {len(y_train)}')
print(f'Total # of sample in test dataset: {len(y_test)}')

"""# Model Development"""

from sklearn.metrics import (
    accuracy_score,
    precision_score,
    recall_score,
    f1_score,
    classification_report,
    confusion_matrix
)

# Import Models
from catboost import CatBoostClassifier
from sklearn.ensemble import AdaBoostClassifier, RandomForestClassifier

# Function for Evaluation Metrics and Plotting
def evaluate_and_plot(model, model_name, X_test, y_test):
    y_pred = model.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    prec = precision_score(y_test, y_pred, average='weighted')
    rec = recall_score(y_test, y_pred, average='weighted')
    f1 = f1_score(y_test, y_pred, average='weighted')

    # Display Classification Report
    print(f"\n--- {model_name} ---")
    print(f"Accuracy: {acc:.4f}")
    print(f"Precision: {prec:.4f}")
    print(f"Recall: {rec:.4f}")
    print(f"F1-Score: {f1:.4f}")
    print("\nClassification Report:\n", classification_report(y_test, y_pred))

    # Confusion Matrix Plot
    cm = confusion_matrix(y_test, y_pred)
    plt.figure(figsize=(6, 4))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
    plt.title(f'Confusion Matrix - {model_name}')
    plt.xlabel('Predicted')
    plt.ylabel('Actual')
    plt.show()

    return acc, prec, rec, f1

# List to Store Evaluation Results
results = []

# 1. CatBoost Classifier
catboost_model = CatBoostClassifier(iterations=100, learning_rate=0.5, depth=6, verbose=0, random_seed=42)
catboost_model.fit(x_train, y_train)
results.append(
    ('CatBoost', *evaluate_and_plot(catboost_model, 'CatBoost', x_test, y_test))
)

# 2. AdaBoost Classifier
adaboost_model = AdaBoostClassifier(n_estimators=100, learning_rate=0.5, random_state=42)
adaboost_model.fit(x_train, y_train)
results.append(
    ('AdaBoost', *evaluate_and_plot(adaboost_model, 'AdaBoost', x_test, y_test))
)

# 3. Random Forest Classifier
random_forest_model = RandomForestClassifier(n_estimators=100, max_depth=6, random_state=42)
random_forest_model.fit(x_train, y_train)
results.append(
    ('Random Forest', *evaluate_and_plot(random_forest_model, 'Random Forest', x_test, y_test))
)

# Convert Results to DataFrame for Plotting
results_df = pd.DataFrame(results, columns=['Model', 'Accuracy', 'Precision', 'Recall', 'F1-Score'])

# Plot Evaluation Metrics Comparison
# Metrik yang Akan Diplot
metrics = ['Accuracy', 'Precision', 'Recall', 'F1-Score']
x = np.arange(len(results_df['Model']))  # Lokasi Label Model
width = 0.2  # Lebar Setiap Bar

# Warna yang Konsisten dan Menarik untuk Setiap Metrik
colors = ['#4C72B0', '#55A868', '#C44E52', '#8172B2']

# Ukuran Figure
plt.figure(figsize=(20, 8))

# Membuat Bar untuk Setiap Metrik
for i, (metric, color) in enumerate(zip(metrics, colors)):
    plt.bar(
        x + i * width,
        results_df[metric],
        width,
        label=metric,
        color=color,
        alpha=0.85
    )

    # Menampilkan Nilai pada Setiap Bar
    for j, value in enumerate(results_df[metric]):
        plt.text(
            x[j] + i * width,
            value + 0.01,
            f"{value:.2f}",
            ha='center',
            va='bottom',
            fontsize=12,
            fontweight='bold',
            color='#333333'
        )

# Judul dan Label Sumbu yang Informatif
plt.title('Model Performance Comparison', fontsize=24, fontweight='bold', color='#333333', pad=20)
plt.xlabel('Model', fontsize=18)
plt.ylabel('Score', fontsize=18)
plt.xticks(x + width * 1.5, results_df['Model'], fontsize=14, fontweight='bold')
plt.yticks(fontsize=14)
plt.legend(title='Metrics', fontsize=14, title_fontsize='16', loc='lower right')

# Grid Horizontal untuk Membantu Membaca Nilai
plt.grid(axis='y', linestyle='--', alpha=0.7)

# Menampilkan Visualisasi
plt.show()